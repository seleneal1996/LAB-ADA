# -*- coding: utf-8 -*-
"""ADA1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kMYXnt-nv8fbcAsWva6bR6zpErjfl1EG

#PRIMER LABORATORIO


---
#Barrios Cornejo Selene
"""

import random
import time

def bubble_sort(arr):
  n=len(arr)
  for i in range(n):
    for j in range(0,n-i-1):
      if arr[j]>arr[j+1]:
        arr[j],arr[j+1],arr[j]

def printArray(arr):
  for i in range(len(arr)):
    print("%d" %arr[i])

def Generando(arr):
  f = open("burbujapy.txt", "w")
  for k in range(0,50000,5000):
    print(k)
    acu=0
    for i in range(10):
      for c in range(k):
        arr.append(random.randint(100,10000))
      t0=time.time()
      bubble_sort(arr)
      t1=time.time()
      tiempo1=round(t1-t0,0)
      arr.clear()
      acu=acu+tiempo1
    print(acu)
    prom=acu/10
  f.write(str(k)+","+str(prom)+"\n")
  f.close()

A=[]
Generando(A)

def insertion_sort(arr):
  for slot in range(1,len(arr)):
    value=arr[slot]
    test_slot=slot-1
    while test_slot>-1 and arr[test_slot]>value:
      arr[test_slot+1] = arr[test_slot]
      test_slot=test_slot-1
    arr[test_slot+1]=value
  return arr

  def Generando(arr):
    f = open("insertpy.txt", "w")
    for k in range(0,50000,5000):
      print(k)
      acu=0
      for i in range(10):
        for c in range(k):
          arr.append(random.randint(1000,10000))
        t0=time.time()
        insertion_sort(arr)
        t1=time.time()
        tiempo1=round(t1-t0,0)
        arr.clear()
        acu=acu+tiempo1
      print(acu)
      prom=acu/10
    f.write(str(k)+","+str(prom)+"\n")
    f.close()

B=[]
Generando(B)

from random import sample
print(sample([x for x in range(80,100)],10))

def Generando2(n, mode, a=0,b=100):
    comp=0
    asig=0
    c_objeto=0
    Malloc=0
    if mode == 'creciente':
        return list(range(n))
    elif mode == 'decreciente':
        return list(range(n - 1, -1, -1))
    A = [None] * n
    asig=asig+1
    c_objeto=c_objeto+1
    Malloc=Malloc+n
    for i in range(n):
        A[i] = random.randint(a, b)
        comp= comp+1
        asig=asig+2
    return A
for i in [5, 10, 50, 100, 500, 1000, 5000, 10000]:
  A = Generando2(i,"creciente")

import random
def createRandomSortedList(num,start = 1, end = 100):
  arr = []
  tmp = random.randint(start,end)
  for x in range(num):
   while tmp in arr:
     tmp = random.randint(start, end)
   arr.append(tmp)
  return arr
for i in [5, 10]:
  arr = createRandomSortedList(i)
  print(arr)

import time
import random

#Nota: cometi una cantinflada en el algoritmo de burbuja en el anterior trabajo linea 18 :,c 
#perdon
def bubble_sort(arr):
  #Mis Variables para analisis
  comparacion=0
  asignacion=0
  c_objeto=0

  n=len(arr) #tam del vector
  asignacion=asignacion+ 2# tam + primera asignacion del i en el primer for
  c_objeto=c_objeto+1# creacion de objeto range de forma iterativa
  for i in range(n):
    comparacion=comparacion+1#comparacion del for para evaluar si esta en el rango
    asignacion=asignacion+1# primera asignacion de j del segundo for
    c_objeto=c_objeto+1#range de forma iterativa
    for j in range(0,n-i-1):
      comparacion=comparacion+1#comparacion del for 
      if arr[j]>arr[j+1]:
        arr[j],arr[j+1]=arr[j+1],arr[j]
        asignacion=asignacion+3#en el swap se realiza 3 asignaciones
      comparacion=comparacion+1#el if realiza una comparacion
      asignacion=asignacion+1#incremento iterativo del segundo for
    comparacion=comparacion+1#el iterador se sale del rango
    asignacion=asignacion+1#incremento iterativo del primer for
  comparacion=comparacion+1#el iterador se vuelve a salir del rango
  return (comparacion,asignacion,c_objeto,0)

def insertion_sort(A):
  comp = 0
  asig = 0
  n = len(A) # Size del Vector
  i = 1
  asig = asig + 2 # n = len(A) (linea 59) +
                    # La primera asignacion del i de arriba (linea 60)
  while i < n:
      comp = comp + 1 # Comparacion del while (linea 65)
      key = A[i]
      j = i - 1
      asig = asig + 2 # key = A[i] (linea 69) +
                        # j = i - 1 (linea 70)
      while j >= 0 and A[j] > key:
          comp = comp + 2 # Las 2 comparaciones del while (j >= 0 and A[j] > key) (linea 75)
          A[j + 1] = A[j]
          j = j - 1
          asig = asig + 2 # A[j + 1] = A[j] (linea 79) +
                            # El decremento del j (linea 80)
      comp = comp + 2 # Comparaciones 'extra' del while al no cumplir con la condicion (linea 75)
      A[j + 1] = key
      i = i + 1
      asig = asig + 2 # A[j + 1] = key (linea 88) +
                        # El incremento del i (linea 89)
  comp = comp + 1 # Comparacion 'extra' del while al no cumplir con la condicion (linea 65)
  return (comp, asig, 0, 0) # Retornado como 4-tupla
def createRandomSortedList(num, start = 1, end = 100):
  arr = []
  tmp = random.randint(start, end)
  for x in range(num):
    while tmp in arr:
      tmp = random.randint(start, end)
    arr.append(tmp)
  return arr
for k in range(0,50000,5000):
   t0=time.time()
   arr = createRandomSortedList(k)
   (comp, asig, c_objeto, malloc) = bubble_sort(arr)
   t1=time.time()
   tiempo4=round(t1-t0,0)
   comparaciones1= comp*2     
   Asignaciones1  = asig*8     
   C_objeto1   = c_objeto * 200
   Malloc1 = 50 + (malloc * 10)
   TOTAL1  = comparaciones1 + Asignaciones1 + C_objeto1 + Malloc1
   print(k,TOTAL1)

arr = []    
temp = 0;    
     
#Displaying elements of original array    
print("Elements of original array: ");    
for i in range(0, len(arr)):     
    print(arr[i]),    
     
#Sort the array in descending order    
for i in range(0, len(arr)):    
    for j in range(i+1, len(arr)):    
        if(arr[i] < arr[j]):    
            temp = arr[i];    
            arr[i] = arr[j];    
            arr[j] = temp;    
     
print();    
     
#Displaying elements of array after sorting    
print("Elements of array sorted in descending order: ");    
for i in range(0, len(arr)):     
    print(arr[i]),